package edu.uncc.sis.aside.constants;

import java.util.Arrays;
import java.util.List;

import org.eclipse.core.runtime.IPath;

public class PluginConstants {

	public static final String PLUGIN_ID = "CodeAnnotate";
	//edu.uncc.sis.aside
	public static final String TRUST_BOUNDARIES_FILE = "aside-trust-boundaries.xml";
	public static final String VALIDATION_RULES_FILE = "aside-valiation-rules.xml";

	public static final String DEFAULT_TRUST_BOUNDARIES_FILE = "default_rule_pack"
			+ System.getProperty("file.separator")
			+ "aside-default-trust-boundaries.xml";
	public static final String DEFAULT_VALIDATION_RULES_FILE = "default_rule_pack"
			+ System.getProperty("file.separator")
			+ "aside-default-validation-rules.xml";
	public static final String DEFAULT_SECURE_PROGRAMMING_KNOWLEDGE_BASE = "default_rule_pack"
			+ System.getProperty("file.separator")
			+ "aside-secure-programming-knowledge-base.xml";
	
	//newly added
	public static final String ESAPI = "ESAPI";
	public static final String ESAPI_VALIDATOR = "validator";
	public static final String ESAPI_ENCODER = "encoder";
	public static final String ESAPI_VALIDATOR_GETVALIDINPUT = "getValidInput";


	public static final int VR = 1;
	public static final int TB = 2;
	public static final int VK = 3;
	
	public static final int VK_INPUTVALIDATION = 1;
	public static final int VK_OUTPUTENCODING = 2;
	
	public static final String ASIDE_ANNOTATION_TYPE = "edu.uncc.sis.aside.invisibleAnnotation";
	public static final String ASIDE_MARKER_TYPE = "edu.uncc.sis.aside.AsideMarker";

	public static final List<String> JAVA_MAP_TYPES = Arrays.asList(
			"java.util.Map", "java.util.HashMap", "java.util.AbstractMap",
			"java.util.Attributes", "java.util.Hashtable",
			"java.util.IdentityHashMap", "java.util.RenderingHints",
			"java.util.TreeMap", "java.util.WeakHashMap");

	public static final List<String> JAVA_LIST_TYPES = Arrays.asList(
			"java.util.List", "java.util.AbstractList", "java.util.ArrayList",
			"java.util.LinkedList", "java.util.Vector", "java.util.Stack");
//this is the comprehensive version of encoding types
//	public static final String[] ENCODING_TYPES = new String[] { "Base64",
//			"CSS", "DN", "HTML", "HTMLAttribute", "JavaScript", "LDAP", "OS",
//			"SQL", "VBScript", "XML", "XMLAttribute", "XPath" };
//the following ENCODING_TYPES is for the education version use
	/*public static final String[] ENCODING_TYPES = new String[] {"CSS", "HTML", "HTMLAttribute", "JavaScript",
		"OS", "SQL", "XML", "XMLAttribute", "XPath" };*/
	public static final String[] ENCODING_TYPES = new String[] {"CSS", "HTML", "HTMLAttribute", "JavaScript"};
	public static final List<String> JAVA_NUMERIC_TYPES = Arrays
			.asList(new String[] { "java.lang.Integer", "java.lang.Double",
					"java.lang.Short", "java.lang.Float", "java.lang.Long" });

	public static final List<String> JAVA_NUMERIC_METHODS = Arrays
			.asList(new String[] { "parseInt", "parseDouble", "parseShort",
					"parseFloat", "parseLong", "valueOf" });
	
	//newly added
	public static final String outFileNameForPojoResult = "pojoResult.txt";
	public static final String matchStr = ".*(set|get|is)([A-Z]).*"; //set or get or is
	//newly added 2012.01.01
	public static final String AttrIsInput = "input";
	public static final String AttrIsOutput = "output";
	public static final String AttrIsSpecialOutput = "specialOutput";
	public static final String AttrIsWarning = "warning";
	public static final String ReadMore = "Read More";
	
	public static final String DontUseWarning = "<<Warning>> DO NOT USE IT!";
	public static final String BlankLine = "\n";
	public static final String DynamicSQLWarningMsg = "Please do not use dynamic SQL statements, security experts recommend using parameterized SQL statements!";
    public static final String ESAPI_ENCODING_COMMENTS = "// NOTE: code generated by ASIDE\n                  ";
	public static final String ESAPI_COMMENTS = "/* NOTE: If the following ASIDE generated code detects a problem \n * (e.g., malicious characters entered by user) an exception is thrown.\n * Doing so will skip the rest of the try block code and go directly to\n * (execute) one of the generated catch blocks below.\n * */ "  + "\n";
	//public static final String ESAPI_COMMENTS_WITH_TRY_ = "/* NOTE: If the following ASIDE generated code detects a problem \n                     * (e.g., malicious characters entered by user) an exception is thrown.\n                     * Doing so will skip the rest of the try block code and go directly to\n                     * (execute) one of the generated catch blocks below.\n                     * */ "  + "\n                     ";
	public static final String ESAPI_SIMPLE_COMMENT = "\n/* NOTE: ASIDE has created the following try catch blocks.\n * If the generated input validation code detects a problem\n * (e.g., malicious characters entered by user) an exception is thrown.\n * Doing so will skip the rest of the try block code and go directly to\n * one of the generated catch blocks below.\n * */\n";
//"// NOTE: If ASIDE finds any input problem, the catch block will be executed\n            ";   
	public static final String VALIDATION_EXCEPTION_COMMENTS = "/* This catch block is executed when ASIDE finds input that did\n * not match validation rules (e.g., bad user input). When this happens,\n * the developer should maintain usability in this catch block\n * (e.g., response.sendRedirect(\"Login.jsp\"); with an accompanying\n * unsuccessful attempt indication presented to the user).\n * */ \n\n // Note: Default return generated by ASIDE";
    //newly added Dec 27th
    public static final String INTRUTION_EXCEPTION_COMMENTS = "/* This catch block will be executed when advanced \n * intrusion behavior is detected in ASIDEâ€™s try block \n * statement. This exception should also be handled by the \n * developer similar to the ValidationException block.\n * */ \n\n // NOTE: default return generated by ASIDE";
    public static final String ESAPI_COMMENT = "\n// NOTE: code generated by ASIDE";
    //newly added Feb. 9 2012
    public static final List<String> VALIDATION_TYPES_TO_BE_DELETED = Arrays.asList(new String[]{"HTTPContextPath", "HTTPCookieName",
    	"HTTPCookieValue", "HTTPHeaderName", "HTTPHeaderValue", "HTTPJSESSIONID", "HTTPScheme", "HTTPServerName",
    	"HTTPServerPath", "HTTPURI", "HTTPURL", "AcceptLenientDates", "DirectoryName",  "Redirect", "AccountName", "IPAddress", "HTTPQueryString", "HTTPParameterName", "RoleName", "SystemCommand", "HTTPPath", "ConfigurationFile", "HTTPServletPath"});
    public static final String HostUrl = "http://hci.uncc.edu/tomcat/ASIDE/"; //"http://www.google.com/#q=";
    //newly added Feb. 24, can't change this array, code uses it
	public static String[] returnTypeCategories = new String[]{"false", "void", "0", "null"};
	public static final String USER_DEFINED_ASIDE_RULES_Folder = "src" + IPath.SEPARATOR + "aside-rules";
	
	public static final int OUTPUT_IGNORE_RANK_NUM = 6;
	public static final int OUTPUT_NOTICE_LABEL_RANK_NUM = 7;
	public static final int INPUT_IGNORE_RANK_NUM = 8;
	public static final int INPUT_NOTICE_LABEL_RANK_NUM = 9;
	public static final String TOOL_TIP ="ESIDE potential security vulnerability: accessing unvalidated input";// "ASIDE has flagged this code as potentially vulnerable. Left click the icon to find out why.";
	public static final String LOG_SEND_END_DATE = "2020/05/19 24:00:00";
	public static final String USERIDLIST_EMAIL_SUBJECT = "UNCC ASIDE userId list";
	public static final List<String> ALLOWED_USERID_EMAIL_SENDER = Arrays
			.asList(new String[] { "\"Zhu, Jun\" <jzhu16@uncc.edu>", "\"Whitney, Michael\" <mwhitne6@uncc.edu>"});
}
