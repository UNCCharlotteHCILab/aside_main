package edu.uncc.aside.codeannotate.asideInterface;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IMarkerResolution;
import org.eclipse.ui.IMarkerResolution2;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.browser.IWebBrowser;

import edu.uncc.aside.codeannotate.Constants;
import edu.uncc.aside.codeannotate.Plugin;

/*
import edu.uncc.sis.aside.AsidePlugin;
import edu.uncc.sis.aside.constants.PluginConstants;
import edu.uncc.sis.aside.utils.ASIDEMarkerAndAnnotationUtil;
import edu.uncc.sis.aside.utils.Converter;
*/

public class VulnerabilityTitleResolution implements IMarkerResolution,
IMarkerResolution2{
	

	String label;
	int markerId = -1;
    VulnerabilityTitleResolution(String label, int markerId) {
       this.label = label;
       this.markerId = markerId;
    }
    public String getLabel() {
       return label;
    }
    public void run(IMarker marker) {
       MessageDialog.openInformation(null, "Red Flag Demo", "This quick-fix is not yet implemented");
    	System.out.println("Resolution run");

    }
	@Override
	public String getDescription() {
		// TODO Auto-generated method stub
		
		String descriptionString = "";
		
		//if we are faking a vulnerability for a ui study, show a custom description
		
/*		if(markerId == 1)
		{
			descriptionString = edu.uncc.aside.codeannotate.asideInterface.VariablesAndConstants.ANNOTATION_VULNERABILITY_ONE_DESC;
		}
		else if(markerId == 2)
		{
			descriptionString = edu.uncc.aside.codeannotate.asideInterface.VariablesAndConstants.ANNOTATION_VULNERABILITY_TWO_DESC;
		}
		else
		{
			descriptionString = edu.uncc.aside.codeannotate.asideInterface.VariablesAndConstants.ANNOTATION_VULNERABILITY_DESC;
		}*/
		
		descriptionString = "This code uses the getParameter method from the HttpServletRequest to access external user data.  "
				+ "If the input is not validated attackers can exploit this vulnerability and insert malicious code."
				+ "<p><p>View the options below to discover input validation techniques for specific types of allowed data"
				+ "<p><p>Go to https://www.owasp.org/index.php/Data_Validation for more information.";
		
		 return descriptionString;
	}
	@Override
	public Image getImage() {
		// TODO Auto-generated method stub
		ImageDescriptor descriptor = Plugin
				.getImageDescriptor("redFlag.png");
		Image image = Plugin.imageCache.get(descriptor);

		if (image == null) {
			image = descriptor.createImage();
			Plugin.imageCache.put(descriptor, image);
		}
		return image;
	}
 }